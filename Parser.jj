PARSER_BEGIN(Parser)

import java.util.List;
import java.util.ArrayList;

public class Parser {

  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode expression;
    IValue value;

    while (true) {
      try {
        expression = parser.Start();
        value = expression.eval(new Environment());
        System.out.println(value.show());
      } catch (ParseException e) {
        e.printStackTrace();
        parser.ReInit(System.in);
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < WHILE : "while" >
| < DO : "do" >
| < LET : "let" >
| < IN : "in" >
| < END : "end" >
| < ASSIGN : "=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIV : "/" >
| < GT : ">" >
| < LT : "<" >
| < GTE : ">=" >
| < LTE : "<=" >
| < EQ : "==" >
| < NEQ : "~=" >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "~" >
| < LPAR : "(" >
| < RPAR : ")" >
| < SEQ : ";" >
| < EL : ";;" >
| < NUM : (["0"-"9"])+ >
| < TRUE : "true" >
| < FALSE : "false" >
| < ID : ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])* >
}

ASTNode Start() :
{
  ASTNode t;
}
{
  t = Expression() <EL>
  { return t; }
}

ASTNode Expression() :
{
  ASTNode t1, t2;
}
{
  t1=LogicalOR()
  ( <SEQ> t2=LogicalOR()
    { t1 = new ASTSeq(t1, t2); }
  )*
  { return t1; }
}

ASTNode LogicalOR() :
{
  ASTNode t1, t2;
}
{
  t1=LogicalAND()
  ( <OR> t2=LogicalAND()
    { t1 = new ASTOr(t1, t2); }
  )*
  { return t1; }
}

ASTNode LogicalAND() :
{
  ASTNode t1, t2;
}
{
  t1=Equality()
  ( <AND> t2=Equality()
    { t1 = new ASTAnd(t1, t2); }
  )*
  { return t1; }
}

ASTNode Equality() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1=Comparison()
  ( (op=<EQ> | op=<NEQ>) t2=Comparison()
    {
      if (op.kind == EQ) {
        t1 = new ASTEquals(t1, t2);
      } else {
        t1 = new ASTNotEquals(t1, t2);
      }
    }
  )?
  { return t1; }
}

ASTNode Comparison() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1=AddSub()
  ( (op=<GT> | op=<LT> | op=<GTE> | op=<LTE>) t2=AddSub()
    {
      if (op.kind == GT) {
        t1 = new ASTGreaterThan(t1, t2);
      } else if (op.kind == LT) {
        t1 = new ASTLessThan(t1, t2);
      } else if (op.kind == GTE) {
        t1 = new ASTGreaterThanEqual(t1, t2);
      } else {
        t1 = new ASTLessThanEqual(t1, t2);
      }
    }
  )?
  { return t1; }
}

ASTNode AddSub() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1=MulDiv()
  ( (op=<PLUS> | op=<MINUS>) t2=MulDiv()
    {
      if (op.kind == PLUS) {
        t1 = new ASTAdd(t1, t2);
      } else {
        t1 = new ASTSub(t1, t2);
      }
    }
  )*
  { return t1; }
}

ASTNode MulDiv() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1=Unary()
  ( (op=<TIMES> | op=<DIV>) t2=Unary()
    {
      if (op.kind == TIMES) {
        t1 = new ASTMul(t1, t2);
      } else {
        t1 = new ASTDiv(t1, t2);
      }
    }
  )*
  { return t1; }
}

ASTNode Unary() :
{
  ASTNode t1;
}
{
  (
    t1=Factor()
  |
    <MINUS> t1=Unary()
    { t1 = new ASTNegate(t1); }
  |
    <NOT> t1=Unary()
    { t1 = new ASTNot(t1); }
  )
  { return t1; }
}

ASTNode Factor() :
{
  Token n;
  ASTNode t1, t2, t3;
  List<String> ids = new ArrayList<String>();
  List<ASTNode> init_exprs = new ArrayList<ASTNode>();
}
{
  (
    n=<ID>
    { t1 = new ASTId(n.image); }
  |
    n=<NUM>
    { t1 = new ASTNum(Integer.parseInt(n.image)); }
  |
    (n=<TRUE> | n=<FALSE>)
    { t1 = new ASTBool(Boolean.parseBoolean(n.image)); }
  |
    <IF> t1=Expression() <THEN> t2=Expression() <ELSE> t3=Expression() <END>
    { t1 = new ASTIf(t1, t2, t3); }
  |
    <WHILE> t1=Expression() <DO> t2=Expression() <END>
    { t1 = new ASTWhile(t1, t2); }
  |
    <LET>
    ( n=<ID> <ASSIGN> t1=Expression()
      {
        ids.add(n.image);
        init_exprs.add(t1);
      }
    )+
    <IN> t2=Expression() <END>
    { t1 = new ASTLet(ids, init_exprs, t2); }
  |
    <LPAR> t1=Expression() <RPAR>
  )
  { return t1; }
}
