PARSER_BEGIN(Parser)

import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;

public class Parser {

    public static void main(String args[]) throws java.io.IOException {

        Parser parser;
        ASTNode expression;
        IType type;
        IValue value;

        if (args.length == 0) {
            // REPL mode.
            parser = new Parser(System.in);
            Environment<IValue> evalEnv = new Environment<IValue>();
            Environment<IType> typeEnv = new Environment<IType>();

            while (true) {
                // Print prompt.
                System.out.print("> ");

                try {
                    expression = parser.Start();
                    type = expression.typecheck(typeEnv);
                    value = expression.eval(evalEnv);
                    System.out.println(value.show() + " : " + type.show());
                } catch (ParseException e) {
                    // Check for EOF.
                    if (e.currentToken.next.image == "") {
                        return;
                    }
                    System.err.printf("Syntax error: %s\n", formatSyntaxErrorMessage(e));
                    parser.ReInit(System.in);
                } catch (TypeException e) {
                    System.err.println("Error: " + e.getMessage());
                } catch (NameNotDefinedException e) {
                    System.err.println("Runtime error: " + e.getMessage());
                } catch (DivisionByZeroException e) {
                    System.err.println("Runtime error: " + e.getMessage());
                }
            }

        } else if (args.length == 1) {
            // Compiler mode.
            try {
                parser = new Parser(new FileInputStream(args[0]));
                expression = parser.Start();
                expression.typecheck(new Environment<IType>());
            } catch(FileNotFoundException e) {
                System.err.printf("File '%s' not found.\n", args[0]);
                return;
            } catch (ParseException e) {
                System.err.printf("Syntax error: %s\n", formatSyntaxErrorMessage(e));
                return;
            } catch (TypeException e) {
                System.err.println("Error: " + e.getMessage());
                return;
            }

            String classname = removeExtension(args[0]);
            Code mainCode = Code.getInstance();

            mainCode.emitIntro(classname);
            expression.compile(new Environment<Integer>());
            mainCode.emitEpilogue();
            List<String> files = mainCode.dump(classname + ".j");
            runJasmin(files);
        } else {
            System.err.println("Usage: java Parser [<file>]");
        }
    }

    private static String formatSyntaxErrorMessage(ParseException e) {
        return String.format(
            "Unexpected token '%s' at line %d, column %d.",
            e.currentToken.next.image,
            e.currentToken.next.beginLine,
            e.currentToken.next.beginColumn
        );
    }

    private static String removeExtension(String s) {
        if (s.indexOf(".") > 0) {
            return s.substring(0, s.lastIndexOf("."));
        }
        return s;
    }

    private static void runJasmin(List<String> files) {
        String[] command = new String[] {
          "sh", "-c", "java -jar jasmin.jar " + String.join(" ", files)
        };

        try {
            Process p = Runtime.getRuntime().exec(command);
            p.waitFor();

            if (p.exitValue() == 0) {
                BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = br.readLine();
                while (line != null) {
                    System.out.println("[ jasmin ] " + line);
                    line = br.readLine();
                }
            } else {
                System.out.println("Warning: Failed to run jasmin.jar on .j files.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
    }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < INT : "int" >
| < BOOL : "bool" >
| < STRING : "string" >
| < REF : "ref" >
| < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < NEW : "new" >
| < PRINTLN : "println" >
| < WHILE : "while" >
| < DO : "do" >
| < LET : "let" >
| < IN : "in" >
| < FUN : "fun" >
| < ARROW : "->" >
| < END : "end" >
| < ASSIGN : "=" >
| < ASSIGNREF : ":=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIV : "/" >
| < GT : ">" >
| < LT : "<" >
| < GTE : ">=" >
| < LTE : "<=" >
| < EQ : "==" >
| < NEQ : "~=" >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "~" >
| < LPAR : "(" >
| < RPAR : ")" >
| < COMMA : "," >
| < COLON : ":" >
| < SEQ : ";" >
| < DEREF : "!" >
| < EL : ";;" >
| < NUM : (["0"-"9"])+ >
| < TRUE : "true" >
| < FALSE : "false" >
| < STRING_LITERAL : "\"" (~["\""])* "\"" >
| < ID : ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])* >
}

ASTNode Start() :
{
  ASTNode t;
}
{
  t=Expression() <EL>
  { return t; }
}

ASTNode Expression() :
{
  ASTNode t1, t2;
}
{
  t1=Assignment()
  ( <SEQ> t2=Assignment()
    { t1 = new ASTSeq(t1, t2); }
  )*
  { return t1; }
}

ASTNode Assignment() :
{
  ASTNode t1, t2;
}
{
  t1=NewPrintln()
  ( <ASSIGNREF> t2=NewPrintln()
    { t1 = new ASTAssign(t1, t2); }
  )?
  { return t1; }
}

ASTNode NewPrintln() :
{
  ASTNode t1;
}
{
  (
    t1=LogicalOR()
  |
    <NEW> t1=NewPrintln()
    { t1 = new ASTNew(t1); }
  |
    <PRINTLN> t1=NewPrintln()
    { t1 = new ASTPrintln(t1); }
  )
  { return t1; }
}

ASTNode LogicalOR() :
{
  ASTNode t1, t2;
}
{
  t1=LogicalAND()
  ( <OR> t2=LogicalAND()
    { t1 = new ASTOr(t1, t2); }
  )*
  { return t1; }
}

ASTNode LogicalAND() :
{
  ASTNode t1, t2;
}
{
  t1=Equality()
  ( <AND> t2=Equality()
    { t1 = new ASTAnd(t1, t2); }
  )*
  { return t1; }
}

ASTNode Equality() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1=Comparison()
  ( (op=<EQ> | op=<NEQ>) t2=Comparison()
    {
      if (op.kind == EQ) {
        t1 = new ASTEquals(t1, t2);
      } else {
        t1 = new ASTNotEquals(t1, t2);
      }
    }
  )?
  { return t1; }
}

ASTNode Comparison() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1=AddSub()
  ( (op=<GT> | op=<LT> | op=<GTE> | op=<LTE>) t2=AddSub()
    {
      if (op.kind == GT) {
        t1 = new ASTGreaterThan(t1, t2);
      } else if (op.kind == LT) {
        t1 = new ASTLessThan(t1, t2);
      } else if (op.kind == GTE) {
        t1 = new ASTGreaterThanEqual(t1, t2);
      } else {
        t1 = new ASTLessThanEqual(t1, t2);
      }
    }
  )?
  { return t1; }
}

ASTNode AddSub() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1=MulDiv()
  ( (op=<PLUS> | op=<MINUS>) t2=MulDiv()
    {
      if (op.kind == PLUS) {
        t1 = new ASTAdd(t1, t2);
      } else {
        t1 = new ASTSub(t1, t2);
      }
    }
  )*
  { return t1; }
}

ASTNode MulDiv() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1=Unary()
  ( (op=<TIMES> | op=<DIV>) t2=Unary()
    {
      if (op.kind == TIMES) {
        t1 = new ASTMul(t1, t2);
      } else {
        t1 = new ASTDiv(t1, t2);
      }
    }
  )*
  { return t1; }
}

ASTNode Unary() :
{
  ASTNode t1;
}
{
  (
    t1=FunctionCall()
  |
    <MINUS> t1=Unary()
    { t1 = new ASTNegate(t1); }
  |
    <NOT> t1=Unary()
    { t1 = new ASTNot(t1); }
  |
    <DEREF> t1=Unary()
    { t1 = new ASTDeRef(t1); }
  )
  { return t1; }
}

ASTNode FunctionCall() :
{
  ASTNode t1, t2;
  List<ASTNode> args = new ArrayList<ASTNode>();
}
{
  t1=Factor()
  (
    <LPAR>
    (
      t2=Expression() { args.add(t2); }
      (
        <COMMA> t2=Expression()
        { args.add(t2); }
      )*
    )?
    <RPAR>
    { t1 = new ASTApply(t1, args); }
  )?
  { return t1; }
}

IType Type() :
{
  Token n;
  IType t;
  List<IType> args_types = new ArrayList<IType>();
}
{
  (
    n=<INT>
    { t = TInt.getInstance(); }
  |
    n=<BOOL>
    { t = TBool.getInstance(); }
  |
    n=<STRING>
    { t = TString.getInstance(); }
  |
    n=<REF> t=Type()
    { t = new TRef(t); }
  |
    <LPAR>
    (
      t=Type() { args_types.add(t); }
      (
        <COMMA> t=Type() { args_types.add(t); }
      )*
    )?
    <RPAR> t=Type()
    { t = new TClosure(args_types, t); }
  )
  { return t; }
}

ASTNode Factor() :
{
  Token n;
  IType type;
  ASTNode t1, t2, t3;
  List<String> ids = new ArrayList<String>();
  List<ASTNode> init_exprs = new ArrayList<ASTNode>();
  List<IType> types_list = new ArrayList<IType>();
}
{
  (
    n=<ID>
    { t1 = new ASTId(n.image); }
  |
    n=<NUM>
    { t1 = new ASTNum(Integer.parseInt(n.image)); }
  |
    (n=<TRUE> | n=<FALSE>)
    { t1 = new ASTBool(Boolean.parseBoolean(n.image)); }
  |
    n=<STRING_LITERAL>
    { t1 = new ASTString(n.image.substring(1, n.image.length() - 1)); }
  |
    <IF> t1=Expression() <THEN> t2=Expression() <ELSE> t3=Expression() <END>
    { t1 = new ASTIf(t1, t2, t3); }
  |
    <WHILE> t1=Expression() <DO> t2=Expression() <END>
    { t1 = new ASTWhile(t1, t2); }
  |
    <LET>
    (
      n=<ID> <COLON> type=Type() <ASSIGN> t1=Expression()
      {
        ids.add(n.image);
        init_exprs.add(t1);
        types_list.add(type);
      }
    )+
    <IN> t2=Expression() <END>
    { t1 = new ASTLet(ids, init_exprs, types_list, t2); }
  |
    <FUN>
    (
      n=<ID> <COLON> type=Type()
      {
        ids.add(n.image);
        types_list.add(type);
      }
      (
        <COMMA> n=<ID> <COLON> type=Type()
        {
          ids.add(n.image);
          types_list.add(type);
        }
      )*
    )?
    <ARROW> t1=Expression() <END>
    { t1 = new ASTFun(ids, types_list, t1); }
  |
    <LPAR> t1=Expression() <RPAR>
  )
  { return t1; }
}
